// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2974.SoccerBot.subsystems;

import org.usfirst.frc2974.SoccerBot.RobotMap;
import org.usfirst.frc2974.SoccerBot.commands.*;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Solenoid;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *controls solenoids
 */
abstract public class AbstractIntake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	//enumerates the two cases used later; up, and fall
	public enum ArmMovement {
		up, fall, block
	}
	public enum ArmPosition {
		up, high, dribble, low, flat
	}

	//creates new declarations
	protected ArmMovement action;
    protected IntakeFlat flatCommand = new IntakeFlat(); 
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    protected final Solenoid armSolenoid = RobotMap.intakeArmSolenoid;
    protected final CANTalon armTalon = RobotMap.intakeArmTalon;
    protected final Solenoid armBlock = RobotMap.intakeArmBlock;
    //private final Compressor armCompressor = RobotMap.intakeArmCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        setDefaultCommand(new IntakeManual());
    }
    
    public void startFlat() {
    	flatCommand.start()
    }
    
    public void endFlat() {
    	if (getCurrentCommand() == flatCommand) {
    		flatCommand.endFlat();
    	}
    }
    
    //sets solenoid values to true/false depending on case
    public void setArmMovement(ArmMovement move)
    {	
    	switch(move){
    	case up:
    		armSolenoid.set(true);
    		armBlock.set(false);
    		break;
    	case fall:
    		armSolenoid.set(false);
    		armBlock.set(false);
    		break;
    	case block:
    		armSolenoid.set(true);
    	    armBlock.set(true);
    		break;    		
    	}
    	action = move;
    }  
    
    public ArmMovement getAction()
    {
    	return action;
    }
    
    public void setMotorPower(double speed)
    {
    	armTalon.set(speed);
    }
    
    abstract public ArmPosition getArmPosition();    
}

